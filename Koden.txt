/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_USB_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t N_reg = 8;              // Number of registers

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

	void LED_USB_OTG(int period)
	{
	 HAL_GPIO_WritePin(GPIOD, USB_OTG_indicator_Pin, SET);
	 HAL_Delay(period);
	 HAL_GPIO_WritePin(GPIOD, USB_OTG_indicator_Pin, RESET);
	 HAL_Delay(period);
	 HAL_GPIO_WritePin(GPIOD, USB_OTG_indicator_Pin, SET);
	 HAL_Delay(period);
	 HAL_GPIO_WritePin(GPIOD, USB_OTG_indicator_Pin, RESET);
	 HAL_Delay(period);
	}

	void LED_Power(void)
		{
		 HAL_GPIO_WritePin(GPIOD, Power_Indicator_Pin, SET);
		}


	//Verification Function
	void DeviceResetFunction(void)
	{
	 HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, RESET);
	 HAL_Delay(0.5); // Minimum low duration: 252us for device reset  - 1ms is chosen (1 tick = 2ms)
	 HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, SET);
	}

	//Verification Function
	void DeviceSyncFunction(void)
		{
		 HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, RESET);
		 HAL_Delay(0.00005);//Minimum low duration: 123ns and Max low duration: 252us for device sync (0.01ms defined / 10us)
		 HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, SET);
		}


	void LED_ON_BOARD_TEST(void)
	   {
	 	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_SET);
	 	  HAL_Delay(1000);
	 	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
	 	  HAL_Delay(1000);
	   }


	void AMC131M02_Primary_Write(uint32_t addr, uint32_t data)  // Sync Reset Function Included
	{


		uint32_t txPackageBuffer[2] = {addr, data};

		HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low

		//SPI transfer (Package with adress and data)
		HAL_SPI_Transmit(&hspi1, txPackageBuffer, 3, HAL_MAX_DELAY);


		//Reset Function
		//HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, RESET);
		//HAL_Delay(0.5); // Minimum low duration: 252us for device reset (1 tick = 2ms -> 0.5 tick = 1ms)
		//HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, SET);

		HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS HIGH


		// Start External clock for ADC (8.133MHz)
		//HAL_Delay(5000);
		//HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_5);

		//Synchronization with secondary ADC: - Should be done before conversion data is retrieved from FIFO buffer.
		//HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, RESET);
		//HAL_Delay(0.00005);//Minimum low duration: 123ns and Max low duration: 252us for device sync (100us defined atm - Not valid. )
		//HAL_GPIO_WritePin(GPIOF, SYNC_RESET_Pin, SET);
	}

	void AMC131M02_Primary_Read(uint32_t addr, uint32_t *data)
		{
		//CLOCK register reset value: 030Eh: 11 0000 1110. (10 bits)


			uint32_t txBuf[] = {addr};
			uint32_t rxBuf[2];
			HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low

			//SPI transfer (Package with adress and data)
			//HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 3, HAL_MAX_DELAY);
			//HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS HIGH

			*data = rxBuf[1];
		}

	void AMC131M02_Secondary_Write(uint32_t addr, uint32_t data)
	{
	    uint32_t txSPackageBuffer[2] = {addr, data};

	    HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin, GPIO_PIN_RESET);  // CS Low

	    HAL_SPI_Transmit(&hspi2, txSPackageBuffer, 3, HAL_MAX_DELAY);

	    HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin, GPIO_PIN_SET);  // CS High

	    // Start External clock for ADC (8.133MHz)
	    // HAL_Delay(5000);
	    //HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_5);
	}






  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_SPI2_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_USB_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */


  //===============================Register Address AMC131M02 (8-bit address)===============================
  //uint8_t ID = 0x00;            //00000000
  //uint8_t STATUS = 0x01;	      //00000001
  //uint8_t MODE = 0x02;		  //00000010
  //uint8_t CLOCK = 0x03;		  //00000011
  //uint8_t GAIN = 0x04;		  //00000100
  //uint8_t CFG = 0x06;		      //00000110

  //uint8_t CH0_CFG = 0x09;		  //00001001
  //uint8_t CH0_OCAL_MSB = 0x0A;  //00001010
  //uint8_t CH0_OCAL_LSB = 0x0B;  //00001011
  //uint8_t CH0_GCAL_MSB = 0x0C;  //00001100
  //uint8_t CH0_GCAL_LSB = 0x0D;  //00001101

  //uint8_t CH1_CFG = 0x0E;       //00001110
  //uint8_t CH1_OCAL_MSB = 0x0F;  //00001111
  //uint8_t CH1_OCAL_LSB = 0x10;  //00010000
  //uint8_t CH1_GCAL_MSB = 0x11;  //00010001
  //uint8_t CH1_GCAL_LSB = 0x12;  //00010010

  //uint8_t DCDC_CTRL = 0x31;     //00110001
  //uint8_t REGMAP_CRC = 0x3E;    //00111110

  //uint8_t N_reg = 8;              // Number of registers
  //==============================================================================

  //===============================Data config for each register===============================

  //For CLOCK register
  //uint8_t PWR_MODE = 10;	   // High resolution mode
  //uint8_t OSR = 111;           // Oversampling Ratio : 16384
  //uint8_t TURBO = 0;		   // Turbo Mode (OSR = 64)  0 = disabled / 1 = enabled.
  //uint8_t CLK_DIV = 00;        // (Clock Division of 2)
  //uint8_t CH0_EN = 1;		   //

  //For DCDC_CTRL Register
  //uint8_t DCDC_FREQ = 0000;    //(3.768 MHz - 4.100MHz)




  // Power ON Indicator - Green LED.
  LED_Power();



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  //========================================================


  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //AMC131M02_Primary_Write(0x05,0x03);
	  //HAL_Delay(2000);

	  /*

	  //===============CLOCK REGISTER WRITE TEST=======================
	  //Adress
	  uint32_t Test_CLK_ADDR[1] = {0x03};

	  // Transmit the adress
	  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low
	  HAL_SPI_Transmit(&hspi1, (uint8_t*)Test_CLK_ADDR, sizeof(Test_CLK_ADDR), HAL_MAX_DELAY);
	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS High



	  // Array med CLOCK register reset value:  /// Værdien på de 2 bytes er swaped!?? Thee fuckk
	  uint32_t Test_CLK_Reg_Reset[1] = {0b0000001100001110};

	  // Transmit the data
	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low
	  HAL_SPI_Transmit(&hspi1, (uint8_t*)Test_CLK_Reg_Reset, sizeof(Test_CLK_Reg_Reset), HAL_MAX_DELAY);
	  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS High

	 //For debug
	 //uint32_t data;
	 HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low


	 uint8_t receiveBuffer[4];  // Define a buffer to hold the received data

	 // Receive the data
	 HAL_SPI_Receive(&hspi1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY);


     HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS High
     //uint32_t Data = data;
     HAL_Delay(100);
     *
	 */

	  // Transmitt og receive test funciton:
	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low
	  //uint8_t transmitBuffer[1] = {00000011};  // Define a buffer to hold the data to be transmitted
	  //uint8_t receiveBuffer[4];            // Define a buffer to hold the received data
	  //HAL_SPI_TransmitReceive(&hspi1, transmitBuffer, receiveBuffer, 6, HAL_MAX_DELAY);
	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS High


	 //====================SPI Verfication Transmit receive sequentiel test===============================

	  //SYNC/Reset function - Sync devices before SPI communcation starts.
	  DeviceResetFunction();

	  //HAL_Delay(500);

	  //Reset function
	  //DeviceSyncFunction();

	  //External CLK signal enable: - If not used, this pin becomes High.
	  //HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_5);

	  //Transmit sequentiel test function
	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  // CS Low

	  // Define a buffer to hold the data to be transmitted
	  //uint8_t transmitBuffer[3] = {0x03, 0x03, 0x0E};  // Address 0x03, and the data 0x030E split into two bytes (0x03, 0x0E)
	  //HAL_SPI_Transmit(&hspi1, transmitBuffer, 3, HAL_MAX_DELAY);

	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  // CS High

	  //Receive sequentiel test function
	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low
	  //uint8_t receiveBuffer[4];  // Define a buffer to hold the received data
	  //HAL_SPI_Receive(&hspi1, receiveBuffer, 3, HAL_MAX_DELAY);
	  //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS High



	  //========================Read the CLOCK register test function, sequentiel============================
	  HAL_Delay(5000);
	  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  // CS Low

	  uint8_t transmitBuffer[3] = {0x03,
			  æ0x0E};  // Address 0x03, and the data 0x030E split into two bytes (0x03, 0x0E)  (0x0E

	  HAL_SPI_Transmit(&hspi1, transmitBuffer, 3, HAL_MAX_DELAY);

	  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  // CS High

	  // Read the 16-bit value from the address 0x03
	  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  // CS Low

	  uint8_t readCommand[1] = {0x03};  // Address 0x03 to read from

	  HAL_SPI_Transmit(&hspi1, readCommand, 1, HAL_MAX_DELAY);  // Send the read address

	  uint8_t receiveBuffer[2];  // Buffer to hold the received data (2 bytes for 16-bit value)

	  HAL_SPI_Receive(&hspi1, receiveBuffer, 2, HAL_MAX_DELAY);  // Receive 2 bytes (16-bit value)

	  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  // CS High

	  // Combine the two bytes received into a single 16-bit value
	  uint16_t receivedValue = (receiveBuffer[0] << 8) | receiveBuffer[1];

	  //Initialize test write function - Primary ADC Startup procedure - Define registers data.
	  /*
	   *
      for (int i = 0; i < 1; i++)
      {
          uint8_t txAddrBuffer[] = {0x03,0x03,0x03}; // Array with address elements
          uint16_t txDataBuffer[] = {0x03,0x03,0x03}; // Array with data elements
          AMC131M02_Primary_Write(txAddrBuffer[i], txDataBuffer[i]);

          //Read data

          //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_RESET);  //CS Low
          //AMC131M02_Primary_Read(0x03, uint32_t *data);
          //uint8_t receiveBuffer[4];  // Define a buffer to hold the received data

          // Receive the data
          //HAL_SPI_Receive(&hspi1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY);

          //HAL_SPI_TransmitReceive(&hspi1, 0x03, receiveBuffer, sizeof(receiveBuffer), HALL_MAX_DELAY);


          //HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin, GPIO_PIN_SET);  //CS High
          //uint32_t Data = data;
      }

*/
      //Sync Test functions for SPI-timing test.
      //DeviceSyncFunction();  //Sync function  (Important Low duration - See function)
      //HAL_Delay(1);
  	  //DeviceResetFunction(); // Reset function
  	  //HAL_Delay(1); //



	  /*

      //Initialize test write function - Secondary ADC Startup procedure - Define registers data.

      for (int i = 0; i < 1; i++)
      {
          uint8_t txxAddrBuffer[] = {0x03}; // Array with address elements
          uint16_t txxDataBuffer[] = {0x03}; // Array with data elements
          AMC131M02_Secondary_Write(txxAddrBuffer[i], txxDataBuffer[i]);
          HAL_Delay(5000);
      }

	   *
	   */

      //LED_ON_BOARD_TEST();

     //USB OTG Transmitting - Call this function when data is transmitting to external PC.
     //LED_USB_OTG(200);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_5);
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 122;
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
  PeriphClkInitStruct.PLLI2SDivQ = 1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 250;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 255;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{

  /* USER CODE BEGIN USB_OTG_FS_Init 0 */

  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI2_NSS_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_RESET_GPIO_Port, SYNC_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CLKIN_ENABLE_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_indicator_Pin|Power_Indicator_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin SPI2_NSS_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI2_NSS_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : SYNC_RESET_Pin */
  GPIO_InitStruct.Pin = SYNC_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SYNC_RESET_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DataReady1_Pin DataReady2_Pin */
  GPIO_InitStruct.Pin = DataReady1_Pin|DataReady2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : CLKIN_ENABLE_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = CLKIN_ENABLE_Pin|USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLKIN_ADC_Pin */
  GPIO_InitStruct.Pin = CLKIN_ADC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(CLKIN_ADC_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_indicator_Pin Power_Indicator_Pin */
  GPIO_InitStruct.Pin = USB_OTG_indicator_Pin|Power_Indicator_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
